from typing import List, Optional
from fastapi import FastAPI, HTTPException, Query
import httpx
import os
from pydantic import BaseModel
from dotenv import load_dotenv

# Load local .env when running locally
load_dotenv()

GOOGLE_BOOKS_KEY = os.getenv("GOOGLE_BOOKS_API_KEY", "")  # optional

app = FastAPI(title="Google Books Bridge", version="0.1")

class BookHit(BaseModel):
    id: str
    title: str
    authors: Optional[List[str]] = None
    publisher: Optional[str] = None
    publishedDate: Optional[str] = None
    description: Optional[str] = None
    previewLink: Optional[str] = None
    snippet: Optional[str] = None

class SearchResults(BaseModel):
    query: str
    totalItems: int
    results: List[BookHit]

@app.get("/search", response_model=SearchResults)
async def search_books(q: str = Query(..., min_length=1), max_results: int = Query(5, ge=1, le=20)):
    params = {
        "q": q,
        "maxResults": max_results,
    }
    if GOOGLE_BOOKS_KEY:
        params["key"] = GOOGLE_BOOKS_KEY

    url = "https://www.googleapis.com/books/v1/volumes"
    async with httpx.AsyncClient(timeout=10.0) as client:
        r = await client.get(url, params=params)
    if r.status_code != 200:
        raise HTTPException(status_code=500, detail=f"Google Books error: {r.text}")

    data = r.json()
    items = data.get("items", [])
    hits = []
    for it in items:
        vol = it.get("volumeInfo", {})
        search_info = it.get("searchInfo", {})
        hit = BookHit(
            id=it.get("id", ""),
            title=vol.get("title", "Untitled"),
            authors=vol.get("authors"),
            publisher=vol.get("publisher"),
            publishedDate=vol.get("publishedDate"),
            description=vol.get("description"),
            previewLink=vol.get("previewLink"),
            snippet=search_info.get("textSnippet"),
        )
        hits.append(hit)
    return SearchResults(query=q, totalItems=data.get("totalItems", 0), results=hits)
